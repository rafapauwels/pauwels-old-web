{"version":3,"sources":["components/Nav/index.js","components/Home/index.js","components/ContactForm/index.js","components/Contact/index.js","App.js","serviceWorker.js","index.js"],"names":["Nav","react_default","a","createElement","className","Link","to","href","target","rel","Home","ContactForm","state","name","email","subject","message","_this2","this","onSubmit","e","preventDefault","console","log","JSON","stringify","document","getElementById","innerHTML","fetch","method","headers","Accept","Content-Type","body","then","type","value","onChange","setState","required","id","Component","Contact","ContactForm_ContactForm","App","BrowserRouter","src_components_Nav","Route","exact","path","component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","navigator","serviceWorker","ready","registration","unregister"],"mappings":"sVAoBeA,SAhBL,kBACRC,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,UACEF,EAAAC,EAAAC,cAAA,OAAKC,UAAU,SACbH,EAAAC,EAAAC,cAAA,UAAIF,EAAAC,EAAAC,cAACE,EAAA,EAAD,CAAMC,GAAG,KAAT,oBAENL,EAAAC,EAAAC,cAAA,OAAKC,UAAU,cACbH,EAAAC,EAAAC,cAAA,UAAIF,EAAAC,EAAAC,cAACE,EAAA,EAAD,CAAMC,GAAG,SAAT,SACJL,EAAAC,EAAAC,cAAA,UAAIF,EAAAC,EAAAC,cAAA,KAAGI,KAAK,iCAAiCC,OAAO,SAASC,IAAI,uBAA7D,SACJR,EAAAC,EAAAC,cAAA,UAAIF,EAAAC,EAAAC,cAACE,EAAA,EAAD,CAAMC,GAAG,UAAT,UACJL,EAAAC,EAAAC,cAAA,UAAIF,EAAAC,EAAAC,cAACE,EAAA,EAAD,CAAMC,GAAG,YAAT,iBCCGI,SAXJ,kBACTT,EAAAC,EAAAC,cAAA,eACEF,EAAAC,EAAAC,cAAA,KAAGC,UAAU,eAAb,OACAH,EAAAC,EAAAC,cAAA,gKACAF,EAAAC,EAAAC,cAAA,OAAKC,UAAU,gBACbH,EAAAC,EAAAC,cAAA,KAAGC,UAAU,cAAcG,KAAK,iCAAiCC,OAAO,SAASC,IAAI,uBAArF,QACAR,EAAAC,EAAAC,cAACE,EAAA,EAAD,CAAMD,UAAU,cAAcE,GAAG,SAAjC,YCPeK,0NAEnBC,MAAQ,CAACC,KAAM,GAAIC,MAAO,GAAIC,QAAS,GAAIC,QAAS,4EAE3C,IAAAC,EAAAC,KA+CP,OACIjB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,gBACbH,EAAAC,EAAAC,cAAA,QAAMgB,SA/BM,SAAAC,GAChBA,EAAEC,iBACFC,QAAQC,IAAIC,KAAKC,UAAU,CACzBZ,KAAMI,EAAKL,MAAMC,KACjBC,MAAOG,EAAKL,MAAME,MAClBC,QAASE,EAAKL,MAAMG,QACpBC,QAASC,EAAKL,MAAMI,WAMtBU,SAASC,eAAe,uBAAuBC,UAAY,UAE3DC,MAAM,4DAA6D,CACjEC,OAAQ,OACRC,QAAS,CACPC,OAAU,mBACVC,eAAgB,oBAElBC,KAAMV,KAAKC,UAAU,CACnBZ,KAAMI,EAAKL,MAAMC,KACjBC,MAAOG,EAAKL,MAAME,MAClBC,QAASE,EAAKL,MAAMG,QACpBC,QAASC,EAAKL,MAAMI,YAErBmB,KAAKT,SAASC,eAAe,uBAAuBC,UAAY,UAM7D3B,EAAAC,EAAAC,cAAA,SAAOC,UAAU,cAAjB,QACEH,EAAAC,EAAAC,cAAA,SAAOC,UAAU,aAAagC,KAAK,OAAOvB,KAAK,OAAOwB,MAAOnB,KAAKN,MAAMC,KAAMyB,SAlD/D,SAAAlB,GACvBM,SAASC,eAAe,uBAAuBC,UAAY,OAC3DX,EAAKsB,SAAS,CAAE1B,KAAMO,EAAEZ,OAAO6B,SAgDmFG,UAAQ,KAGpHvC,EAAAC,EAAAC,cAAA,SAAOC,UAAU,eAAjB,SACEH,EAAAC,EAAAC,cAAA,SAAOC,UAAU,cAAcgC,KAAK,QAAQvB,KAAK,QAAQwB,MAAOnB,KAAKN,MAAME,MAAOwB,SAlDlE,SAAAlB,GACxBM,SAASC,eAAe,uBAAuBC,UAAY,OAC3DX,EAAKsB,SAAS,CAAEzB,MAAOM,EAAEZ,OAAO6B,SAgDuFG,UAAQ,KAGzHvC,EAAAC,EAAAC,cAAA,SAAOC,UAAU,iBAAjB,WACEH,EAAAC,EAAAC,cAAA,SAAOC,UAAU,gBAAgBgC,KAAK,OAAOvB,KAAK,UAAUwB,MAAOnB,KAAKN,MAAMG,QAASuB,SAlDrE,SAAAlB,GAC1BM,SAASC,eAAe,uBAAuBC,UAAY,OAC3DX,EAAKsB,SAAS,CAAExB,QAASK,EAAEZ,OAAO6B,SAgD4FG,UAAQ,KAGhIvC,EAAAC,EAAAC,cAAA,SAAOC,UAAU,iBAAjB,WACEH,EAAAC,EAAAC,cAAA,YAAUC,UAAU,gBAAgBgC,KAAK,OAAOvB,KAAK,UAAUwB,MAAOnB,KAAKN,MAAMI,QAASsB,SAlDxE,SAAAlB,GAC1BM,SAASC,eAAe,uBAAuBC,UAAY,OAC3DX,EAAKsB,SAAS,CAAEvB,QAASI,EAAEZ,OAAO6B,SAgD+FG,UAAQ,KAEnIvC,EAAAC,EAAAC,cAAA,UAAQsC,GAAG,sBAAsBL,KAAK,UAAtC,SAEFnC,EAAAC,EAAAC,cAAA,0EAvE+BuC,cCU1BC,EARD,kBACZ1C,EAAAC,EAAAC,cAAA,WAASC,UAAU,gBACjBH,EAAAC,EAAAC,cAAA,yBACAF,EAAAC,EAAAC,cAAA,6BACAF,EAAAC,EAAAC,cAACyC,EAAD,QCcWC,mLAZX,OACE5C,EAAAC,EAAAC,cAAC2C,EAAA,EAAD,KACE7C,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAAC4C,EAAD,MACA9C,EAAAC,EAAAC,cAAC6C,EAAA,EAAD,CAAOC,OAAK,EAACC,KAAK,IAAIC,UAAWzC,IACjCT,EAAAC,EAAAC,cAAC6C,EAAA,EAAD,CAAOC,OAAK,EAACC,KAAK,WAAWC,UAAWR,aAPhCD,aCGEU,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCbNC,IAASC,OAAOzD,EAAAC,EAAAC,cAACwD,EAAD,MAASjC,SAASC,eAAe,SD4H3C,kBAAmBiC,WACrBA,UAAUC,cAAcC,MAAM3B,KAAK,SAAA4B,GACjCA,EAAaC","file":"static/js/main.94cea73e.chunk.js","sourcesContent":["import React from 'react'\nimport { Link } from 'react-router-dom'\nimport './index.scss'\n\nlet Nav = () => (\n  <nav>\n    <ul>\n      <div className=\"brand\">\n        <li><Link to=\"/\">Rafael Pauwels</Link></li>\n      </div>\n      <div className=\"navigation\">\n        <li><Link to=\"/blog\">blog</Link></li>\n        <li><a href=\"https://github.com/rafapauwels\" target=\"_blank\" rel=\"noopener noreferrer\">work</a></li>\n        <li><Link to=\"/about\">about</Link></li>\n        <li><Link to=\"/contact\">contact</Link></li>\n      </div>\n    </ul>\n  </nav>\n)\n\nexport default Nav","import React from 'react'\nimport { Link } from 'react-router-dom'\nimport './index.scss'\n\nlet Home = () => (\n  <section>\n    <p className=\"action-call\">Hi.</p>\n    <p>I'm a software developer passionate about crafting beautiful, responsive and accessible websites, supported by blazzing fast and scalable backends.</p>\n    <div className=\"button-group\">\n      <a className=\"work-button\" href=\"https://github.com/rafapauwels\" target=\"_blank\" rel=\"noopener noreferrer\">work</a>\n      <Link className=\"blog-button\" to=\"/blog\">blog</Link>\n    </div>\n  </section>\n) \n\nexport default Home","import React, { Component } from 'react'\nimport './index.scss'\n\nexport default class ContactForm extends Component {\n  \n  state = {name: '', email: '', subject: '', message: ''}\n  \n  render() {      \n    const handleNameChange = e => { \n      document.getElementById(\"send-contact-button\").innerHTML = \"send\" \n      this.setState({ name: e.target.value }) \n    }\n    const handleEmailChange = e => { \n      document.getElementById(\"send-contact-button\").innerHTML = \"send\" \n      this.setState({ email: e.target.value }) \n    }\n    const handleSubjectChange = e => { \n      document.getElementById(\"send-contact-button\").innerHTML = \"send\"\n      this.setState({ subject: e.target.value }) \n    }\n    const handleMessageChange = e => {\n      document.getElementById(\"send-contact-button\").innerHTML = \"send\" \n      this.setState({ message: e.target.value }) \n    }\n\n    const sendEmail = e => {\n      e.preventDefault()\n      console.log(JSON.stringify({\n        name: this.state.name,\n        email: this.state.email,\n        subject: this.state.subject,\n        message: this.state.message,\n      }))\n      // Change button send to sending and make unclicable\n    \n      // Make post, if success change 'send' to 'sent' and unclicable unless any stated is altered\n      // if fail show red fail and shows the user the user a 'mailto:' button\n      document.getElementById(\"send-contact-button\").innerHTML = \"sending\"\n\n      fetch('https://peaceful-citadel-98690.herokuapp.com/api/contact/', {\n        method: 'POST',\n        headers: {\n          'Accept': 'application/json',\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({\n          name: this.state.name,\n          email: this.state.email,\n          subject: this.state.subject,\n          message: this.state.message,\n        })\n      }).then(document.getElementById(\"send-contact-button\").innerHTML = \"sent\")\n    }\n\n    return (\n        <div className=\"contact-form\">\n          <form onSubmit={sendEmail}>\n            <label className=\"name-label\"> Name\n              <input className=\"name-input\" type=\"text\" name=\"name\" value={this.state.name} onChange={handleNameChange} required/>\n            </label>\n\n            <label className=\"email-label\"> Email\n              <input className=\"email-input\" type=\"email\" name=\"email\" value={this.state.email} onChange={handleEmailChange} required/>\n            </label>\n\n            <label className=\"subject-label\"> Subject\n              <input className=\"subject-input\" type=\"text\" name=\"subject\" value={this.state.subject} onChange={handleSubjectChange} required/>\n            </label>\n\n            <label className=\"message-label\"> Message\n              <textarea className=\"message-input\" type=\"text\" name=\"message\" value={this.state.message} onChange={handleMessageChange} required/>\n            </label>\n            <button id=\"send-contact-button\" type=\"submit\">send</button>\n          </form>\n          <footer>*your email won't be stored or shared in anyway.</footer>\n        </div>\n      )\n  }\n}\n","import React from 'react'\nimport './index.scss'\n\nimport ContactForm from '../ContactForm'\n\nlet Contact = () => (\n  <section className=\"contact-page\">\n    <h1>Let's talk.</h1>\n    <h2>How can I help?</h2>\n    <ContactForm />\n  </section>\n)\n\nexport default Contact","import React, { Component } from 'react'\nimport './App.scss'\n\nimport { BrowserRouter as Router, Route } from 'react-router-dom'\n\nimport Nav from './components/Nav'\nimport Home from './components/Home'\nimport Contact from './components/Contact'\n\nclass App extends Component {\n  render() {\n    return (\n      <Router>\n        <div className=\"App\">\n          <Nav />\n          <Route exact path=\"/\" component={Home} />\n          <Route exact path=\"/contact\" component={Contact} />\n        </div>\n      </Router>\n    )\n  }\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}